#include "pcapdef.h"

namespace PcapDef
{
    const QHash<int, QString> LINK_TYPES = initTypeList();

    QHash<int, QString> initTypeList() {
        QHash<int, QString> list;
        list.insert(LINKTYPE_nullptr,"LINKTYPE_nullptr");
        list.insert(LINKTYPE_ETHERNET,"LINKTYPE_ETHERNET");
        list.insert(LINKTYPE_AX25,"LINKTYPE_AX25");
        list.insert(LINKTYPE_IEEE802_5,"LINKTYPE_IEEE802_5");
        list.insert(LINKTYPE_ARCNET_BSD,"LINKTYPE_ARCNET_BSD");
        list.insert(LINKTYPE_SLIP,"LINKTYPE_SLIP");
        list.insert(LINKTYPE_PPP,"LINKTYPE_PPP");
        list.insert(LINKTYPE_FDDI,"LINKTYPE_FDDI");
        list.insert(LINKTYPE_PPP_HDLC,"LINKTYPE_PPP_HDLC");
        list.insert(LINKTYPE_PPP_ETHER,"LINKTYPE_PPP_ETHER");
        list.insert(LINKTYPE_ATM_RFC1483,"LINKTYPE_ATM_RFC1483");
        list.insert(LINKTYPE_RAW,"LINKTYPE_RAW");
        list.insert(LINKTYPE_C_HDLC,"LINKTYPE_C_HDLC");
        list.insert(LINKTYPE_IEEE802_11,"LINKTYPE_IEEE802_11");
        list.insert(LINKTYPE_FRELAY,"LINKTYPE_FRELAY");
        list.insert(LINKTYPE_LOOP,"LINKTYPE_LOOP");
        list.insert(LINKTYPE_LINUX_SLL,"LINKTYPE_LINUX_SLL");
        list.insert(LINKTYPE_LTALK,"LINKTYPE_LTALK");
        list.insert(LINKTYPE_PFLOG,"LINKTYPE_PFLOG");
        list.insert(LINKTYPE_IEEE802_11_PRISM,"LINKTYPE_IEEE802_11_PRISM");
        list.insert(LINKTYPE_IP_OVER_FC,"LINKTYPE_IP_OVER_FC");
        list.insert(LINKTYPE_SUNATM,"LINKTYPE_SUNATM");
        list.insert(LINKTYPE_IEEE802_11_RADIOTAP,"LINKTYPE_IEEE802_11_RADIOTAP");
        list.insert(LINKTYPE_ARCNET_LINUX,"LINKTYPE_ARCNET_LINUX");
        list.insert(LINKTYPE_APPLE_IP_OVER_IEEE1394,"LINKTYPE_APPLE_IP_OVER_IEEE1394");
        list.insert(LINKTYPE_MTP2_WITH_PHDR,"LINKTYPE_MTP2_WITH_PHDR");
        list.insert(LINKTYPE_MTP2,"LINKTYPE_MTP2");
        list.insert(LINKTYPE_MTP3,"LINKTYPE_MTP3");
        list.insert(LINKTYPE_SCCP,"LINKTYPE_SCCP");
        list.insert(LINKTYPE_DOCSIS,"LINKTYPE_DOCSIS");
        list.insert(LINKTYPE_LINUX_IRDA,"LINKTYPE_LINUX_IRDA");
        for (int i = LINKTYPE_USER0_LINKTYPE_USER15_STARTS; i <= LINKTYPE_USER0_LINKTYPE_USER15_ENDS; i++) {
            list.insert(i,"LINKTYPE_USER0-LINKTYPE-USER15");
        }
        list.insert(LINKTYPE_IEEE802_11_AVS,"LINKTYPE_IEEE802_11_AVS");
        list.insert(LINKTYPE_BACNET_MS_TP,"LINKTYPE_BACNET_MS_TP");
        list.insert(LINKTYPE_PPP_PPPD,"LINKTYPE_PPP_PPPD");
        list.insert(LINKTYPE_GPRS_LLC,"LINKTYPE_GPRS_LLC");
        list.insert(LINKTYPE_LINUX_LAPD,"LINKTYPE_LINUX_LAPD");
        list.insert(LINKTYPE_BLUETOOTH_HCI_H4,"LINKTYPE_BLUETOOTH_HCI_H4");
        list.insert(LINKTYPE_USB_LINUX,"LINKTYPE_USB_LINUX");
        list.insert(LINKTYPE_PPI,"LINKTYPE_PPI");
        list.insert(LINKTYPE_IEEE802_15_4,"LINKTYPE_IEEE802_15_4");
        list.insert(LINKTYPE_SITA,"LINKTYPE_SITA");
        list.insert(LINKTYPE_ERF,"LINKTYPE_ERF");
        list.insert(LINKTYPE_BLUETOOTH_HCI_H4_WITH_PHDR,"LINKTYPE_BLUETOOTH_HCI_H4_WITH_PHDR");
        list.insert(LINKTYPE_AX25_KISS,"LINKTYPE_AX25_KISS");
        list.insert(LINKTYPE_LAPD,"LINKTYPE_LAPD");
        list.insert(LINKTYPE_PPP_WITH_DIR,"LINKTYPE_PPP_WITH_DIR");
        list.insert(LINKTYPE_C_HDLC_WITH_DIR,"LINKTYPE_C_HDLC_WITH_DIR");
        list.insert(LINKTYPE_FRELAY_WITH_DIR,"LINKTYPE_FRELAY_WITH_DIR");
        list.insert(LINKTYPE_IPMB_LINUX,"LINKTYPE_IPMB_LINUX");
        list.insert(LINKTYPE_IEEE802_15_4_NONASK_PHY,"LINKTYPE_IEEE802_15_4_NONASK_PHY");
        list.insert(LINKTYPE_USB_LINUX_MMAPPED,"LINKTYPE_USB_LINUX_MMAPPED");
        list.insert(LINKTYPE_FC_2,"LINKTYPE_FC_2");
        list.insert(LINKTYPE_FC_2_WITH_FRAME_DELIMS,"LINKTYPE_FC_2_WITH_FRAME_DELIMS");
        list.insert(LINKTYPE_IPNET,"LINKTYPE_IPNET");
        list.insert(LINKTYPE_CAN_SOCKETCAN,"LINKTYPE_CAN_SOCKETCAN");
        list.insert(LINKTYPE_IPV4,"LINKTYPE_IPV4");
        list.insert(LINKTYPE_IPV6,"LINKTYPE_IPV6");
        list.insert(LINKTYPE_IEEE802_15_4_NOFCS,"LINKTYPE_IEEE802_15_4_NOFCS");
        list.insert(LINKTYPE_DBUS,"LINKTYPE_DBUS");
        list.insert(LINKTYPE_DVB_CI,"LINKTYPE_DVB_CI");
        list.insert(LINKTYPE_MUX27010,"LINKTYPE_MUX27010");
        list.insert(LINKTYPE_STANAG_5066_D_PDU,"LINKTYPE_STANAG_5066_D_PDU");
        list.insert(LINKTYPE_NFLOG,"LINKTYPE_NFLOG");
        list.insert(LINKTYPE_NETANALYZER,"LINKTYPE_NETANALYZER");
        list.insert(LINKTYPE_NETANALYZER_TRANSPARENT,"LINKTYPE_NETANALYZER_TRANSPARENT");
        list.insert(LINKTYPE_IPOIB,"LINKTYPE_IPOIB");
        list.insert(LINKTYPE_MPEG_2_TS,"LINKTYPE_MPEG_2_TS");
        list.insert(LINKTYPE_NG40,"LINKTYPE_NG40");
        list.insert(LINKTYPE_NFC_LLCP,"LINKTYPE_NFC_LLCP");
        list.insert(LINKTYPE_INFINIBAND,"LINKTYPE_INFINIBAND");
        list.insert(LINKTYPE_SCTP,"LINKTYPE_SCTP");
        list.insert(LINKTYPE_USBPCAP,"LINKTYPE_USBPCAP");
        list.insert(LINKTYPE_RTAC_SERIAL,"LINKTYPE_RTAC_SERIAL");
        list.insert(LINKTYPE_BLUETOOTH_LE_LL,"LINKTYPE_BLUETOOTH_LE_LL");
        list.insert(LINKTYPE_NETLINK,"LINKTYPE_NETLINK");
        list.insert(LINKTYPE_BLUETOOTH_LINUX_MONITOR,"LINKTYPE_BLUETOOTH_LINUX_MONITOR");
        list.insert(LINKTYPE_BLUETOOTH_BREDR_BB,"LINKTYPE_BLUETOOTH_BREDR_BB");
        list.insert(LINKTYPE_BLUETOOTH_LE_LL_WITH_PHDR,"LINKTYPE_BLUETOOTH_LE_LL_WITH_PHDR");
        list.insert(LINKTYPE_PROFIBUS_DL,"LINKTYPE_PROFIBUS_DL");
        list.insert(LINKTYPE_PKTAP,"LINKTYPE_PKTAP");
        list.insert(LINKTYPE_EPON,"LINKTYPE_EPON");
        list.insert(LINKTYPE_IPMI_HPM_2,"LINKTYPE_IPMI_HPM_2");
        list.insert(LINKTYPE_ZWAVE_R1_R2,"LINKTYPE_ZWAVE_R1_R2");
        list.insert(LINKTYPE_ZWAVE_R3,"LINKTYPE_ZWAVE_R3");
        list.insert(LINKTYPE_WATTSTOPPER_DLM,"LINKTYPE_WATTSTOPPER_DLM");
        list.insert(LINKTYPE_ISO_14443,"LINKTYPE_ISO_14443");

        return list;
    }
}

